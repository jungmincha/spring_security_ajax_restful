<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!-- 두번 째 -->
 <http auto-config = "true" use-expressions = "true"><!-- 제한이 좁은거서부터 넓은곳으로 , 미시적에서부터 거시적으로 뻗어난다 -->
          <intercept-url pattern="/login/loginForm" access="permitAll" />  
          
                <intercept-url pattern="/user/userForm" access="permitAll" />
        <intercept-url pattern="/user/addUser" access="permitAll" />
          <intercept-url pattern="/" access="permitAll" /> 
          <intercept-url pattern="/user/**" access="hasRole('USER')" />
          
        <intercept-url pattern="/" access="permitAll" />
        <intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
        <intercept-url pattern="/**" access="hasAnyRole('USER, ADMIN')" />
        
         
      <!-- 엑세스에 대한 권한을주는 것! 권한이 없으면 인증을 시키는 곳으로 되돌림-->
      <!-- form-login : 로그인 페이지 -->
     

 <!--로그인 페이지 커스텀 화    -->
      <form-login login-page="/login/loginForm"
                    default-target-url="/"
                    authentication-failure-url="/login/loginForm?error"
                    username-parameter="id"
                    password-parameter="password" />
      
      <logout logout-url="/logout" logout-success-url="/" /> 
      
      
      <!-- 403 에러 처리 -->
 
       <access-denied-handler error-page="/login/accessDenied"/> 
  <!-- member로 로그인처리가 되어있기 떄문에 admin치면 에러 페이지 뜸 -->     
      
        
      
   </http> 
   
   
  <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean> 
    
     <beans:bean id="customNoOpPasswordEncoder" class="edu.bit.ex.security.CustomNoOpPasswordEncoder"/>
      <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   
<!-- provider --> 
   
      
    <!--   <user-service> 
            <user name="member" password="{noop}member" authorities="ROLE_MEMBER" /> 
            <user name="admin" password="{noop}admin" authorities="ROLE_ADMIN , ROLE_MEMBER" /> 
          
          
            {noop}패스워드를 인코드 하는 것 (암호화) 
         </user-service>  -->
      
         <authentication-manager>
       <authentication-provider> 
      
           <!-- 암호화 
           모든 암호화 단계는 인코딩과 디코딩을 거치게 되어있다.
           -->
       <password-encoder ref="bcryptPasswordEncoder"/>
       
         <jdbc-user-service 
               data-source-ref="dataSource"
               role-prefix=""
             users-by-username-query="select username, password, enabled from users where username = ?"
               authorities-by-username-query="select username, authority from authorities where username = ?"
           /> <!-- 
           select ename, empno , 1 from emp where ename = ?
           select ename, case when job = 'MANAGER' case then 'ROLE_ADMIN' else 'ROLE_USER' END AS authority FROM emp WHERE ename = ?-->
      </authentication-provider>
   </authentication-manager> 
   
  <!--  <password-encoder ref="customNoOpPasswordEncoder"/>
 <jdbc-user-service 
               data-source-ref="dataSource"
               role-prefix=""
               users-by-username-query="select username, password, enabled from users where username = ?"
               authorities-by-username-query="select username, authority from authorities where username = ?"
    
           />
            </authentication-provider>
   </authentication-manager>  -->
  
   
          
    
</beans:beans>



